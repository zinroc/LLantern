'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var viewer = require('./viewer');

var BundleAnalyzerPlugin = function () {
  function BundleAnalyzerPlugin(opts) {
    _classCallCheck(this, BundleAnalyzerPlugin);

    this.opts = _extends({
      analyzerMode: 'server',
      analyzerPort: 8888,
      reportFilename: 'report.html',
      openAnalyzer: true,
      generateStatsFile: false,
      statsFilename: 'stats.json',
      // deprecated
      startAnalyzer: true
    }, opts);
  }

  BundleAnalyzerPlugin.prototype.apply = function apply(compiler) {
    var _this = this;

    this.compiler = compiler;

    compiler.plugin('emit', function (curCompiler, callback) {
      var stats = curCompiler.getStats().toJson();

      if (_this.opts.generateStatsFile) {
        (function () {
          var statsStr = JSON.stringify(stats, null, 2);

          curCompiler.assets[_this.opts.statsFilename] = {
            source: function source() {
              return statsStr;
            },
            size: function size() {
              return statsStr.length;
            }
          };
        })();
      }

      var analyzeFn = void 0;

      // Handling deprecated `startAnalyzer` flag
      if (_this.opts.analyzerMode === 'server' && !_this.opts.startAnalyzer) {
        _this.opts.analyzerMode = 'disabled';
      }

      if (_this.opts.analyzerMode === 'server') {
        analyzeFn = function analyzeFn() {
          return _this.startAnalyzerServer(stats);
        };
      } else if (_this.opts.analyzerMode === 'static') {
        analyzeFn = function analyzeFn() {
          return _this.generateStaticReport(stats);
        };
      }

      if (analyzeFn) {
        // Making analyzer logs to be after all webpack warnings in the console
        setTimeout(function () {
          console.log('');
          analyzeFn();
        }, 500);
      }

      callback();
    });
  };

  BundleAnalyzerPlugin.prototype.startAnalyzerServer = function startAnalyzerServer(stats) {
    viewer.startServer(stats, {
      openBrowser: this.opts.openAnalyzer,
      port: this.opts.analyzerPort,
      bundleDir: this.compiler.outputPath
    });
  };

  BundleAnalyzerPlugin.prototype.generateStaticReport = function generateStaticReport(stats) {
    viewer.generateReport(stats, {
      openBrowser: this.opts.openAnalyzer,
      reportFilename: this.opts.reportFilename,
      bundleDir: this.compiler.outputPath
    });
  };

  return BundleAnalyzerPlugin;
}();

module.exports = BundleAnalyzerPlugin;